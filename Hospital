import tkinter as tk
from tkinter import ttk, messagebox
import random
from datetime import date, datetime

class Empleado:
    def __init__(self, nombre, edad, genero, cargo, curp, nss, horario):
        self.id = random.randint(1000, 9999)  
        self.nombre = nombre
        self.edad = edad
        self.genero = genero
        self.cargo = cargo
        self.curp = curp
        self.nss = nss
        self.horario = horario
        self.vacaciones_disponibles = random.randint(15, 25)
        self.vacaciones_tomadas = 0
        self.historial_vacaciones = []

empleados = []
pases_lista = []

def actualizar_listas_empleados():
    nombres_empleados = [f"{emp.nombre} (ID: {emp.id})" for emp in empleados]
    combo_empleados_vac['values'] = nombres_empleados
    combo_editar['values'] = nombres_empleados
    label_info_vac.config(text="")
    btn_tomar_vacaciones_vac.config(state="disabled")
    text_historial_vac.delete("1.0", tk.END)
    actualizar_lista_asistencia()

def actualizar_lista_asistencia():
    lista_empleados_lista.delete(0, tk.END)
    turno = turno_seleccionado.get()
    for emp in empleados:
        if turno == "Todos" or emp.horario == turno:
            lista_empleados_lista.insert(tk.END, f"{emp.nombre} (ID: {emp.id})")

def filtrar_por_turno(event=None):
    actualizar_lista_asistencia()

def registrar_pase():
    seleccionados = lista_empleados_lista.curselection()
    if not empleados:
        messagebox.showwarning("Sin Empleados", "No hay empleados registrados.")
        return
    if not seleccionados:
        messagebox.showwarning("Sin Selección", "Selecciona al menos un empleado presente.")
        return

    hora_entrada_str = entry_hora_entrada.get()
    if not hora_entrada_str:
        messagebox.showwarning("Hora de Entrada", "Por favor, ingresa la hora de entrada en formato HH:MM (24 horas).")
        return
    try:
        hora_entrada = datetime.strptime(hora_entrada_str, "%H:%M")
    except ValueError:
        messagebox.showwarning("Formato Inválido", "La hora de entrada debe estar en formato HH:MM (24 horas).")
        return

    turno_filtro = turno_seleccionado.get()
    horarios_base = {
        "Matutino": datetime.strptime("07:00", "%H:%M"),
        "Vespertino": datetime.strptime("14:30", "%H:%M"),
        "Nocturno": datetime.strptime("20:30", "%H:%M")
    }
    if turno_filtro == "Todos":
        messagebox.showwarning("Turno No Seleccionado", "Por favor, selecciona un turno específico para registrar la asistencia.")
        return
    hora_base = horarios_base.get(turno_filtro, None)
    if hora_base is None:
        messagebox.showwarning("Turno No Válido", "Selecciona un turno válido para registrar asistencia.")
        return

    presentes = []
    empleados_filtrados = [emp for emp in empleados if emp.horario == turno_filtro]

    for index in seleccionados:
        if index < len(empleados_filtrados):
            emp = empleados_filtrados[index]
            minutos_retraso = (hora_entrada - hora_base).total_seconds() / 60

            if minutos_retraso <= 10:
                retardo = "A tiempo"
            elif 10 < minutos_retraso < 30:
                retardo = "Retardo menor"
            else:
                retardo = "Retardo mayor"
            presentes.append(f"{emp.nombre} (ID: {emp.id}) - {retardo}")

    ausentes_obj = [emp for i, emp in enumerate(empleados_filtrados) if i not in seleccionados]
    ausentes = [emp.nombre for emp in ausentes_obj]

    fecha_actual = date.today().strftime("%d/%m/%Y")
    registro = f"{fecha_actual} - Turno: {turno_filtro} - Presentes: {', '.join(presentes) if presentes else 'Ninguno'} | Ausentes: {', '.join(ausentes) if ausentes else 'Ninguno'}"
    pases_lista.append(registro)

    text_historial_lista.config(state="normal")
    text_historial_lista.insert(tk.END, registro + "\n")
    text_historial_lista.config(state="disabled")
    messagebox.showinfo("Pase de Lista Registrado", "El pase de lista ha sido guardado.")

def agregar_empleado():
    nombre = entry_nombre.get()
    edad = entry_edad.get()
    genero = combo_genero.get()
    cargo = combo_cargo.get()
    curp = entry_curp.get()
    nss = entry_nss.get()
    horario = combo_horario.get()

    if not (nombre and edad and genero and cargo and curp and nss and horario):
        messagebox.showwarning("Campos Incompletos", "Por favor, completa todos los campos.")
        return

    if not edad.isdigit() or int(edad) < 18:
        messagebox.showwarning("Edad Inválida", "El empleado debe tener al menos 18 años.")
        return

    nuevo_empleado = Empleado(nombre, edad, genero, cargo, curp, nss, horario)
    empleados.append(nuevo_empleado)
    actualizar_listas_empleados()

    text_historial_empleados.config(state="normal")
    text_historial_empleados.insert(tk.END, f"Nuevo empleado: {nuevo_empleado.nombre} (ID: {nuevo_empleado.id}) - Cargo: {nuevo_empleado.cargo}, Horario: {nuevo_empleado.horario}\n")
    text_historial_empleados.config(state="disabled")

    entry_nombre.delete(0, tk.END)
    entry_edad.delete(0, tk.END)
    combo_genero.set("")
    combo_cargo.set("")
    entry_curp.delete(0, tk.END)
    entry_nss.delete(0, tk.END)
    combo_horario.set("")
    messagebox.showinfo("Empleado Agregado", f"{nuevo_empleado.nombre} ha sido registrado con ID {nuevo_empleado.id}.")

def mostrar_vacaciones(event=None):
    seleccionado = combo_empleados_vac.get()
    if not seleccionado:
        label_info_vac.config(text="")
        text_historial_vac.delete("1.0", tk.END)
        btn_tomar_vacaciones_vac.config(state="disabled")
        return

    for emp in empleados:
        if f"{emp.nombre} (ID: {emp.id})" == seleccionado:
            label_info_vac.config(
                text=f"Edad: {emp.edad}\nGénero: {emp.genero}\nCargo: {emp.cargo}\nCURP: {emp.curp}\nNSS: {emp.nss}\n"
                    f"Días de vacaciones disponibles: {emp.vacaciones_disponibles}\nVacaciones tomadas: {emp.vacaciones_tomadas}/2"
            )
            text_historial_vac.delete("1.0", tk.END)
            for i, registro in enumerate(emp.historial_vacaciones, start=1):
                text_historial_vac.insert(tk.END, f"Vacación {i}: {registro}\n")
            btn_tomar_vacaciones_vac.config(state="normal" if emp.vacaciones_tomadas < 2 else "disabled")
            break

def tomar_vacaciones():
    seleccionado = combo_empleados_vac.get()
    if not seleccionado:
        messagebox.showwarning("Sin Selección", "Por favor, selecciona un empleado.")
        return

    for emp in empleados:
        if f"{emp.nombre} (ID: {emp.id})" == seleccionado:
            if emp.vacaciones_tomadas >= 2:
                messagebox.showinfo("Límite Alcanzado", f"{emp.nombre} ya tomó vacaciones 2 veces en el año.")
            elif emp.vacaciones_disponibles == 0:
                messagebox.showinfo("Sin Días Disponibles", f"{emp.nombre} no tiene días de vacaciones disponibles.")
            else:
                dias_tomados = emp.vacaciones_disponibles
                emp.vacaciones_tomadas += 1
                emp.historial_vacaciones.append(f"{dias_tomados} días tomados ({date.today().strftime('%d/%m/%Y')})")

                text_historial_general_vac.config(state="normal")
                text_historial_general_vac.insert(tk.END, f"{emp.nombre} - Vacaciones #{emp.vacaciones_tomadas} - {dias_tomados} días ({date.today().strftime('%d/%m/%Y')})\n")
                text_historial_general_vac.config(state="disabled")

                messagebox.showinfo("Vacaciones Tomadas", f"{emp.nombre} ha tomado {dias_tomados} días de vacaciones.")
                emp.vacaciones_disponibles = random.randint(15, 23) if emp.vacaciones_tomadas == 1 else 0
                mostrar_vacaciones()
            break

def eliminar_empleado():
    seleccionado = combo_editar.get()
    if not seleccionado:
        messagebox.showwarning("Sin Selección", "Por favor, selecciona un empleado para eliminar.")
        return

    if messagebox.askyesno("Confirmar Eliminación", f"¿Estás seguro de que quieres eliminar a {seleccionado}?"):
        for emp in empleados:
            if f"{emp.nombre} (ID: {emp.id})" == seleccionado:
                empleados.remove(emp)
                actualizar_listas_empleados()
                if entry_editar_nombre: entry_editar_nombre.delete(0, tk.END)
                if entry_editar_edad: entry_editar_edad.delete(0, tk.END)
                if combo_editar_genero: combo_editar_genero.set("")
                if combo_editar_cargo: combo_editar_cargo.set("")
                if entry_editar_curp: entry_editar_curp.delete(0, tk.END)
                if entry_editar_nss: entry_editar_nss.delete(0, tk.END)
                if combo_editar_horario: combo_editar_horario.set("")
                messagebox.showinfo("Empleado Eliminado", f"{emp.nombre} ha sido eliminado correctamente.")
                break

def cargar_datos_empleado(event):
    seleccionado = combo_editar.get()
    for emp in empleados:
        if f"{emp.nombre} (ID: {emp.id})" == seleccionado:
            if entry_editar_nombre: entry_editar_nombre.delete(0, tk.END); entry_editar_nombre.insert(0, emp.nombre)
            if entry_editar_edad: entry_editar_edad.delete(0, tk.END); entry_editar_edad.insert(0, emp.edad)
            if combo_editar_genero: combo_editar_genero.set(emp.genero)
            if combo_editar_cargo: combo_editar_cargo.set(emp.cargo)
            if entry_editar_curp: entry_editar_curp.delete(0, tk.END); entry_editar_curp.insert(0, emp.curp)
            if entry_editar_nss: entry_editar_nss.delete(0, tk.END); entry_editar_nss.insert(0, emp.nss)
            if combo_editar_horario: combo_editar_horario.set(emp.horario)
            break

def editar_empleado():
    seleccionado = combo_editar.get()
    if not seleccionado:
        messagebox.showwarning("Sin Selección", "Por favor, selecciona un empleado para editar.")
        return

    for emp in empleados:
        if f"{emp.nombre} (ID: {emp.id})" == seleccionado:
            nueva_edad = entry_editar_edad.get()
            if not nueva_edad.isdigit() or int(nueva_edad) < 18:
                messagebox.showwarning("Edad Inválida", "La edad debe ser un número y el empleado debe tener al menos 18 años.")
                return

            emp.nombre = entry_editar_nombre.get()
            emp.edad = nueva_edad
            emp.genero = combo_editar_genero.get()
            emp.cargo = combo_editar_cargo.get()
            emp.curp = entry_editar_curp.get()
            emp.nss = entry_editar_nss.get()
            emp.horario = combo_editar_horario.get()
            actualizar_listas_empleados()
            messagebox.showinfo("Empleado Actualizado", f"Los datos de {emp.nombre} han sido actualizados.")
            break

def mostrar_menu(frame):
    for widget in root.winfo_children():
        if not isinstance(widget, tk.Menu): 
            widget.pack_forget()
    frame.pack(fill='both', expand=True) 

root = tk.Tk()
root.title("Control de Empleados - Hospital")
root.geometry("500x850")

menu_barra = tk.Menu(root)
root.config(menu=menu_barra)

menu_general = tk.Menu(menu_barra, tearoff=0)
menu_general.add_command(label="Agregar Empleado", command=lambda: mostrar_menu(frame_principal))
menu_general.add_command(label="Editar/Eliminar Empleado", command=lambda: mostrar_menu(frame_editar))
menu_general.add_command(label="Gestión de Vacaciones", command=lambda: mostrar_menu(frame_vacaciones))
menu_general.add_command(label="Pase de Lista", command=lambda: mostrar_menu(frame_lista))
menu_general.add_separator()
menu_general.add_command(label="Salir", command=root.quit)
menu_barra.add_cascade(label="Menú", menu=menu_general)

frame_lista = tk.Frame(root) 

tk.Label(frame_lista, text="Pase de Lista de Empleados").pack(pady=10)

tk.Label(frame_lista, text="Selecciona el turno para filtrar empleados:").pack(pady=5)
turno_seleccionado = tk.StringVar(value="Todos") 
combo_turno = ttk.Combobox(frame_lista, textvariable=turno_seleccionado, values=["Todos", "Matutino", "Vespertino", "Nocturno"], state="readonly")
combo_turno.current(0)
combo_turno.pack(pady=5)
combo_turno.bind("<<ComboboxSelected>>", filtrar_por_turno)

tk.Label(frame_lista, text="Selecciona los empleados presentes:").pack(pady=5)
lista_empleados_lista = tk.Listbox(frame_lista, selectmode=tk.MULTIPLE, width=50, height=10)
lista_empleados_lista.pack(pady=5)

tk.Label(frame_lista, text="Hora de entrada (HH:MM, formato 24h):").pack(pady=5)
entry_hora_entrada = tk.Entry(frame_lista, width=20) 
entry_hora_entrada.pack(pady=5)

tk.Button(frame_lista, text="Registrar Pase de Lista", command=registrar_pase).pack(pady=15) 

tk.Label(frame_lista, text="Historial de Pases de Lista:").pack(pady=5)
text_historial_lista = tk.Text(frame_lista, height=10, width=60, state="disabled") 
text_historial_lista.pack(pady=5)

frame_principal = tk.Frame(root) 

tk.Label(frame_principal, text="Agregar Nuevo Empleado").pack(pady=10)

tk.Label(frame_principal, text="Nombre:").pack(pady=2)
entry_nombre = tk.Entry(frame_principal)
entry_nombre.pack(pady=2)

tk.Label(frame_principal, text="Edad:").pack(pady=2)
entry_edad = tk.Entry(frame_principal)
entry_edad.pack(pady=2)

tk.Label(frame_principal, text="Género:").pack(pady=2)
combo_genero = ttk.Combobox(frame_principal, values=["Femenino", "Masculino", "Otro"], state="readonly")
combo_genero.pack(pady=2)

tk.Label(frame_principal, text="Cargo:").pack(pady=2)
combo_cargo = ttk.Combobox(frame_principal, values=[
    "Médico", "Enfermero", "Administrativo", "Servicios Generales"
], width=30, state="readonly")
combo_cargo.pack(pady=2)

tk.Label(frame_principal, text="CURP:").pack(pady=2)
entry_curp = tk.Entry(frame_principal)
entry_curp.pack(pady=2)

tk.Label(frame_principal, text="Número de Seguro Social (NSS):").pack(pady=2)
entry_nss = tk.Entry(frame_principal)
entry_nss.pack(pady=2)

tk.Label(frame_principal, text="Horario:").pack(pady=2)
combo_horario = ttk.Combobox(frame_principal, values=["Matutino", "Vespertino", "Nocturno"], state="readonly")
combo_horario.pack(pady=2)

tk.Button(frame_principal, text="Agregar Empleado", command=agregar_empleado).pack(pady=15)

tk.Label(frame_principal, text="Historial de Empleados Agregados:").pack(pady=5)
text_historial_empleados = tk.Text(frame_principal, height=8, width=50, state="disabled") 
text_historial_empleados.pack(pady=10)

frame_editar = tk.Frame(root) 

tk.Label(frame_editar, text="Editar o Eliminar Empleado").pack(pady=10)

tk.Label(frame_editar, text="Selecciona un empleado:").pack(pady=5)
combo_editar = ttk.Combobox(frame_editar, state="readonly")
combo_editar.pack(pady=5)
combo_editar.bind("<<ComboboxSelected>>", cargar_datos_empleado)

tk.Label(frame_editar, text="Nombre:").pack(pady=2)
entry_editar_nombre = tk.Entry(frame_editar)
entry_editar_nombre.pack(pady=2)

tk.Label(frame_editar, text="Edad:").pack(pady=2)
entry_editar_edad = tk.Entry(frame_editar)
entry_editar_edad.pack(pady=2)

tk.Label(frame_editar, text="Género:").pack(pady=2)
combo_editar_genero = ttk.Combobox(frame_editar, values=["Femenino", "Masculino", "Otro"], state="readonly")
combo_editar_genero.pack(pady=2)

tk.Label(frame_editar, text="Cargo:").pack(pady=2)
combo_editar_cargo = ttk.Combobox(frame_editar, values=[
    "Médico", "Enfermero", "Administrativo", "Servicios Generales" 
], width=30, state="readonly")
combo_editar_cargo.pack(pady=2)

tk.Label(frame_editar, text="CURP:").pack(pady=2)
entry_editar_curp = tk.Entry(frame_editar)
entry_editar_curp.pack(pady=2)

tk.Label(frame_editar, text="Número de Seguro Social (NSS):").pack(pady=2)
entry_editar_nss = tk.Entry(frame_editar)
entry_editar_nss.pack(pady=2)

tk.Label(frame_editar, text="Horario:").pack(pady=2)
combo_editar_horario = ttk.Combobox(frame_editar, values=["Matutino", "Vespertino", "Nocturno"], state="readonly")
combo_editar_horario.pack(pady=2)

tk.Button(frame_editar, text="Guardar Cambios", command=editar_empleado).pack(pady=10)
tk.Button(frame_editar, text="Eliminar Empleado", command=eliminar_empleado).pack(pady=5)

frame_vacaciones = tk.Frame(root)

tk.Label(frame_vacaciones, text="Gestión de Vacaciones").pack(pady=10)

tk.Label(frame_vacaciones, text="Selecciona un empleado:").pack(pady=5)
combo_empleados_vac = ttk.Combobox(frame_vacaciones, state="readonly")
combo_empleados_vac.pack(pady=5)
combo_empleados_vac.bind("<<ComboboxSelected>>", mostrar_vacaciones)

label_info_vac = tk.Label(frame_vacaciones, text="")
label_info_vac.pack(pady=10)

tk.Label(frame_vacaciones, text="Historial de vacaciones del empleado:").pack(pady=5)
text_historial_vac = tk.Text(frame_vacaciones, height=8, width=50) 
text_historial_vac.pack(pady=5)

btn_tomar_vacaciones_vac = tk.Button(frame_vacaciones, text="Tomar Vacaciones", command=tomar_vacaciones)
btn_tomar_vacaciones_vac.pack(pady=15)
btn_tomar_vacaciones_vac.config(state="disabled")

tk.Label(frame_vacaciones, text="Historial General de Vacaciones:").pack(pady=5)
text_historial_general_vac = tk.Text(frame_vacaciones, height=8, width=50, state="disabled") 
text_historial_general_vac.pack(pady=10)

actualizar_listas_empleados()
mostrar_menu(frame_principal)

root.mainloop()
