import tkinter as tk
from tkinter import ttk, messagebox
import random

class Empleado:
    def __init__(self, nombre, edad, genero, cargo):
        self.id = random.randint(1000, 9999)
        self.nombre = nombre
        self.edad = edad
        self.genero = genero
        self.cargo = cargo
        self.vacaciones_disponibles = random.randint(15, 25)
        self.vacaciones_tomadas = 0
        self.historial_vacaciones = []

empleados = []

def actualizar_lista_empleados():
    nombres = [f"{emp.nombre} (ID: {emp.id})" for emp in empleados]
    combo_empleados['values'] = nombres
    combo_editar['values'] = nombres
    label_info.config(text="")
    btn_tomar_vacaciones.config(state="disabled")
    text_historial.delete("1.0", tk.END)

def agregar_empleado():
    nombre = entry_nombre.get()
    edad = entry_edad.get()
    genero = combo_genero.get()
    cargo = combo_cargo.get()

    if not (nombre and edad and genero and cargo):
        messagebox.showwarning("Campos incompletos", "Por favor, completa todos los campos.")
        return

    if not edad.isdigit() or int(edad) < 18:
        messagebox.showwarning("Edad inválida", "El empleado debe tener al menos 18 años.")
        return

    nuevo = Empleado(nombre, edad, genero, cargo)
    empleados.append(nuevo)
    actualizar_lista_empleados()
    entry_nombre.delete(0, tk.END)
    entry_edad.delete(0, tk.END)
    combo_genero.set("")
    combo_cargo.set("")
    messagebox.showinfo("Empleado agregado", f"{nuevo.nombre} ha sido registrado con ID {nuevo.id}.")

def mostrar_vacaciones(event):
    seleccionado = combo_empleados.get()
    text_historial.delete("1.0", tk.END)
    for emp in empleados:
        if f"{emp.nombre} (ID: {emp.id})" == seleccionado:
            label_info.config(
                text=f"Edad: {emp.edad}\nGénero: {emp.genero}\nCargo: {emp.cargo}\n"
                    f"Días de vacaciones disponibles: {emp.vacaciones_disponibles}\nVacaciones tomadas: {emp.vacaciones_tomadas}/2"
            )
            for i, registro in enumerate(emp.historial_vacaciones, start=1):
                text_historial.insert(tk.END, f"Vacación {i}: {registro}\n")
            btn_tomar_vacaciones.config(state="normal" if emp.vacaciones_tomadas < 2 else "disabled")
            break

def tomar_vacaciones():
    seleccionado = combo_empleados.get()
    for emp in empleados:
        if f"{emp.nombre} (ID: {emp.id})" == seleccionado:
            if emp.vacaciones_tomadas >= 2:
                messagebox.showinfo("Límite alcanzado", f"{emp.nombre} ya tomó vacaciones 2 veces.")
                btn_tomar_vacaciones.config(state="disabled")
            elif emp.vacaciones_disponibles == 0:
                messagebox.showinfo("Sin días disponibles", f"{emp.nombre} no tiene días de vacaciones disponibles.")
            else:
                dias = emp.vacaciones_disponibles
                emp.vacaciones_tomadas += 1
                emp.historial_vacaciones.append(f"{dias} días tomados")
                text_historial_general.config(state="normal")
                text_historial_general.insert(tk.END, f"{emp.nombre} - Vacaciones {emp.vacaciones_tomadas} - {dias} días\n")
                text_historial_general.config(state="disabled")
                messagebox.showinfo("Vacaciones tomadas", f"{emp.nombre} ha tomado vacaciones.")

                
                if emp.vacaciones_tomadas == 1:
                    emp.vacaciones_disponibles = random.randint(15, 23)
                else:
                    
                    emp.vacaciones_disponibles = 0

                mostrar_vacaciones(None)
            break

def eliminar_empleado():
    seleccionado = combo_editar.get()
    for emp in empleados:
        if f"{emp.nombre} (ID: {emp.id})" == seleccionado:
            empleados.remove(emp)
            actualizar_lista_empleados()
            messagebox.showinfo("Empleado eliminado", f"{emp.nombre} ha sido eliminado.")
            break

def mostrar_menu_principal():
    for widget in root.winfo_children():
        if not isinstance(widget, tk.Menu):
            widget.pack_forget()
    frame_principal.pack(fill='both', expand=True)

def mostrar_menu_editar():
    for widget in root.winfo_children():
        if not isinstance(widget, tk.Menu):
            widget.pack_forget()
    frame_editar.pack(fill='both', expand=True)

def cargar_datos_empleado(event):
    seleccionado = combo_editar.get()
    for emp in empleados:
        if f"{emp.nombre} (ID: {emp.id})" == seleccionado:
            entry_editar_nombre.delete(0, tk.END)
            entry_editar_nombre.insert(0, emp.nombre)
            entry_editar_edad.delete(0, tk.END)
            entry_editar_edad.insert(0, emp.edad)
            combo_editar_genero.set(emp.genero)
            combo_editar_cargo.set(emp.cargo)
            break

def editar_empleado():
    seleccionado = combo_editar.get()
    for emp in empleados:
        if f"{emp.nombre} (ID: {emp.id})" == seleccionado:
            nueva_edad = entry_editar_edad.get()
            if not nueva_edad.isdigit() or int(nueva_edad) < 18:
                messagebox.showwarning("Edad inválida", "El empleado debe tener al menos 18 años.")
                return
            emp.nombre = entry_editar_nombre.get()
            emp.edad = nueva_edad
            emp.genero = combo_editar_genero.get()
            emp.cargo = combo_editar_cargo.get()
            actualizar_lista_empleados()
            messagebox.showinfo("Empleado actualizado", f"Los datos de {emp.nombre} han sido actualizados.")
            break

root = tk.Tk()
root.title("Control de Empleados - Hospital")
root.geometry("500x750")

menu = tk.Menu(root)
root.config(menu=menu)
menu.add_command(label="Inicio", command=mostrar_menu_principal)
menu.add_command(label="Editar o eliminar empleado", command=mostrar_menu_editar)

frame_principal = tk.Frame(root)
frame_principal.pack(fill='both', expand=True)

tk.Label(frame_principal, text="Nombre:").pack()
entry_nombre = tk.Entry(frame_principal)
entry_nombre.pack()

tk.Label(frame_principal, text="Edad:").pack()
entry_edad = tk.Entry(frame_principal)
entry_edad.pack()

tk.Label(frame_principal, text="Género:").pack()
combo_genero = ttk.Combobox(frame_principal, values=["Femenino", "Masculino", "Otro"], state="readonly")
combo_genero.pack()

tk.Label(frame_principal, text="Cargo:").pack()
combo_cargo = ttk.Combobox(frame_principal, values=[
    "Cargo médico",
    "Cargo de enfermería y técnico de apoyo",
    "Cargo administrativo y de gestión",
    "Cargo de servicios generales"
], width=45, state="readonly")
combo_cargo.pack(pady=5)

tk.Button(frame_principal, text="Agregar empleado", command=agregar_empleado).pack(pady=10)

tk.Label(frame_principal, text="Selecciona un empleado:").pack(pady=5)
combo_empleados = ttk.Combobox(frame_principal, state="readonly")
combo_empleados.pack(pady=5)
combo_empleados.bind("<<ComboboxSelected>>", mostrar_vacaciones)

label_info = tk.Label(frame_principal, text="")
label_info.pack(pady=10)

btn_tomar_vacaciones = tk.Button(frame_principal, text="Tomar vacaciones", state="disabled", command=tomar_vacaciones)
btn_tomar_vacaciones.pack(pady=10)

text_historial = tk.Text(frame_principal, height=5, width=60)
text_historial.pack(pady=10)

tk.Label(frame_principal, text="Historial general de vacaciones:").pack(pady=5)
text_historial_general = tk.Text(frame_principal, height=8, width=60, state="disabled")
text_historial_general.pack(pady=5)

frame_editar = tk.Frame(root)

tk.Label(frame_editar, text="Selecciona empleado a editar o eliminar:").pack(pady=5)
combo_editar = ttk.Combobox(frame_editar, state="readonly")
combo_editar.pack(pady=5)
combo_editar.bind("<<ComboboxSelected>>", cargar_datos_empleado)

tk.Label(frame_editar, text="Nuevo nombre:").pack()
entry_editar_nombre = tk.Entry(frame_editar)
entry_editar_nombre.pack()

tk.Label(frame_editar, text="Nueva edad:").pack()
entry_editar_edad = tk.Entry(frame_editar)
entry_editar_edad.pack()

tk.Label(frame_editar, text="Nuevo género:").pack()
combo_editar_genero = ttk.Combobox(frame_editar, values=["Femenino", "Masculino", "Otro"], state="readonly")
combo_editar_genero.pack()

tk.Label(frame_editar, text="Nuevo cargo:").pack()
combo_editar_cargo = ttk.Combobox(frame_editar, values=[
    "Cargo médico",
    "Cargo de enfermería y técnico de apoyo",
    "Cargo administrativo y de gestión",
    "Cargo de servicios generales"
], width=45, state="readonly")
combo_editar_cargo.pack(pady=5)

tk.Button(frame_editar, text="Guardar cambios", command=editar_empleado).pack(pady=10)
tk.Button(frame_editar, text="Eliminar empleado", command=eliminar_empleado).pack(pady=10)

root.mainloop()

